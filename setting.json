{
  // Управляет размером шрифта в пикселях.
  "editor.fontSize": 14,

  // Управляет высотой строк. Укажите 0 для вычисления высоты строки по размеру шрифта.
  "editor.lineHeight": 0,
  "editor.fontLigatures": false,

  // Управляет насыщенностью шрифта.
  "editor.fontWeight": "normal",

  // Управляет видимостью номеров строк.
  "editor.lineNumbers": "off",

  // Определяет семейство шрифтов.
  "editor.fontFamily": "Dank Mono, IDM Plex Mono, Symbols Nerd Font",
  "editor.inlayHints.fontFamily": "Pragmata Pro",
  "notebook.output.fontFamily": "Pragmata Pro",

  "window.openFilesInNewWindow": "off",
  "editor.tabSize": 4,

  // Определяет, включено ли сворачивание кода в редакторе.
  "editor.folding": false,

  // Вставлять пробелы при нажатии клавиши TAB. Эта настройка переопределяется на основании содержимого файла, когда включен параметр "editor.detectIndentation".
  "editor.insertSpaces": false,
  "editor.smoothScrolling": true,
  "editor.minimap.enabled": false,

  // При открытии файла editor.tabSize и editor.insertSpaces будут определяться на основе содержимого файла.
  "editor.detectIndentation": true,
  "editor.suggestSelection": "first",
  "window.zoomLevel": 0,

  // Определяет, должны ли строки переноситься. Строки будут переноситься по значению min(editor.wrappingColumn, viewportWidthInColumns).
  "editor.wordWrap": "on",

  // Управляет отступом строк с переносом по словам. Допустимые значения: "none", "same" или "indent".
  "editor.wrappingIndent": "deepIndent",
  "editor.wordWrapColumn": 200,

  // Определяет, будет ли содержимое редактора прокручиваться за последнюю строку.
  "editor.scrollBeyondLastLine": true,
  "editor.multiCursorModifier": "ctrlCmd",

  "editor.linkedEditing": true,

  "html.autoClosingTags": true,
  "javascript.autoClosingTags": true,
  "typescript.autoClosingTags": true,

  // Определяет, должны ли в редакторе отображаться управляющие символы.
  "editor.renderControlCharacters": false,

  "editor.unicodeHighlight.ambiguousCharacters": false,

  // Управляет длительностью задержки (в мс), перед отображением кратких предложений.
  "editor.quickSuggestionsDelay": 0,
  "html.completion.attributeDefaultValue": "doublequotes",

  "editor.bracketPairColorization.enabled": false,
  "editor.glyphMargin": false,
  "editor.scrollbar.vertical": "auto",
  "window.density.editorTabHeight": "compact",
  "editor.accessibilitySupport": "off",
  "window.commandCenter": false,
  "workbench.layoutControl.enabled": false,
  "symbols.hidesExplorerArrows": false,

  // Управляет стилем анимации курсора. Допустимые значения: "blink", "smooth", "phase", "expand" и "solid"
  "editor.cursorBlinking": "expand",

  // Определяет стиль курсора. Допустимые значения: "block", "line" и "underline"
  "editor.cursorStyle": "line-thin",
  "editor.cursorSmoothCaretAnimation": "explicit",

  "workbench.colorTheme": "Ariake Dark",
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "workbench.statusBar.visible": false,

  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": [
          //following will be in italic
          "comment",
          "entity.name.type.class", //class names
          "keyword", //import, export, return…
          "constant", //String, Number, Boolean…, this, super
          "storage.modifier", //static keyword
          "storage.type.class.js" //class keyword
        ],
        "settings": {
          "fontStyle": "italic"
        }
      },
      {
        "scope": [
          //following will be excluded from italics (VSCode has some defaults for italics)
          "invalid",
          "keyword.operator",
          "constant.numeric.css",
          "keyword.other.unit.px.css",
          "constant.numeric.decimal.js",
          "constant.numeric.json"
        ],
        "settings": {
          "fontStyle": ""
        }
      }
    ]
  },

  "workbench.editor.tabSizing": "fit",
  "workbench.editor.wrapTabs": true,

  "breadcrumbs.icons": false,
  "breadcrumbs.showKeys": false,
  "breadcrumbs.showFiles": false,
  "breadcrumbs.symbolPath": "off",
  "breadcrumbs.showArrays": false,
  "breadcrumbs.showEvents": false,
  "breadcrumbs.showFields": false,
  "breadcrumbs.showClasses": false,
  "breadcrumbs.showMethods": false,
  "breadcrumbs.showBooleans": false,
  "breadcrumbs.showFunctions": false,
  "breadcrumbs.showConstants": false,
  "breadcrumbs.showEnumMembers": false,
  "breadcrumbs.showConstructors": false,

  "editor.scrollbar.horizontal": "hidden",

  "window.titleBarStyle": "custom",

  "editor.unicodeHighlight.allowedCharacters": {
    "а": true,
    "с": true,
    "Т": true,
    "б": true,
    "е": true
  },

  // Управляет скрытием курсора в обзорной линейке.
  "editor.hideCursorInOverviewRuler": false,

  "git.enableSmartCommit": true,

  "files.exclude": {
    "**/.expo": true,
    "**/.expo-shared": true,
    "**/.idea": true,
    "**/.next": true,
    "**/dist": true
  },
  "window.confirmBeforeClose": "keyboardOnly",
  "emmet.triggerExpansionOnTab": true,
  "git.openRepositoryInParentFolders": "never",

  "js/ts.implicitProjectConfig.experimentalDecorators": true,
  "editor.gotoLocation.multipleDefinitions": "goto",
  "color-picker.languages": ["javascript", "typescript"],
  "settingsSync.ignoredExtensions": ["arickho.matey-vscode"],
  "terminal.integrated.env.linux": {},

  "git.autofetch": true,

  // Setting Folder Template
  "folderTemplates.fileTemplates": {
    "Angular Component": [
      "import { ChangeDetectionStrategy, Component, DestroyRef, inject } from '@angular/core';",
      "",
      "@Component({",
      "   standalone: true,",
      "   imports: [],",
      "   selector: 'app-<FTName | kebabcase>',",
      "   templateUrl: './<FTName | kebabcase>.template.html',",
      "   styleUrl: './<FTName | kebabcase>.style.scss',",
      "   changeDetection: ChangeDetectionStrategy.OnPush",
      "})",
      "export default class <FTName | pascalcase> {",
      "   // DI //",
      "   private readonly _destroyRef = inject(DestroyRef);",
      "",
      "   // IMPORTS //",
      "",
      "   // OUTPUTS //",
      "",
      "   // STATIC INFO //",
      "",
      "   // FORM && CONTROLS //",
      "",
      "   // SUBJECTS //",
      "",
      "   // SIGNALS //",
      "",
      "   // LIFECYCLES //",
      "   constructor() {",
      "      this._destroyRef.onDestroy(() => {});",
      "   }",
      "",
      "   // PROTECTED METHODS //",
      "",
      "   // PRIVATE METHODS //",
      "}"
    ],
    "Angular Template": ["<h1 style='color: red'><FTName | pascalcase></h1>"],
    "Angular Style": [""],
    "Angular Service": [
      "import { HttpClient } from '@angular/common/http';",
      "import { inject, Injectable } from '@angular/core';",
      "import { Observable } from 'rxjs';",
      "",
      "import { API_URL } from '@app';",
      "",
      "import { <FTName | pascalcase> } from './<FTName | kebabcase>';",
      "",
      "@Injectable()",
      "export class <FTName | pascalcase>ApiService {",
      "   readonly #http: HttpClient = inject(HttpClient);",
      "   readonly #apiUrl: string = inject(API_URL) + '<FTName | kebabcase>';",
      "",
      "   public get(data: <FTName | pascalcase>.Get.Req): Observable<<FTName | pascalcase>.Get.Res> {",
      "       return this.#http.get<<FTName | pascalcase>.Get.Res>(`${this.#apiUrl}`, {",
      "           params: {",
      "               ...data,",
      "           },",
      "       });",
      "   }",
      "",
      "   public post(data: <FTName | pascalcase>.Post.Req): Observable<<FTName | pascalcase>.Post.Res> {",
      "       return this.#http.post<<FTName | pascalcase>.Post.Res>(`${this.#apiUrl}`, { ...data })",
      "   }",
      "",
      "   public getOne(data: <FTName | pascalcase>.GetOne.Req): Observable<<FTName | pascalcase>.GetOne.Res> {",
      "       return this.#http.get<<FTName | pascalcase>.GetOne.Res>(`${this.#apiUrl}/${data.id}`)",
      "   }",
      "",
      "   public patch(data: <FTName | pascalcase>.Patch.Req): Observable<<FTName | pascalcase>.Patch.Res> {",
      "       return this.#http.patch<<FTName | pascalcase>.Patch.Res>(`${this.#apiUrl}/${data.id}`, { ...data })",
      "   }",
      "",
      "   public delete(data: <FTName | pascalcase>.Delete.Req): Observable<<FTName | pascalcase>.Delete.Res> {",
      "       return this.#http.delete<<FTName | pascalcase>.Delete.Res>(`${this.#apiUrl}/${data.id}`)",
      "   }",
      "",
      "}"
    ],
    "Angular Interfaces": [
      "export namespace <FTName | pascalcase> {",
      "   export interface Entity {",
      "       id: string;",
      "   }",
      "",
      "   export namespace Get {",
      "       export interface Req {",
      "           offset: number;",
      "           limit: number;",
      "           order: string;",
      "           direction: 'asc' | 'desc';",
      "       }",
      "",
      "       export interface Res {",
      "           rows: Entity[]",
      "       }",
      "   }",
      "",
      "   export namespace Post {",
      "       export interface Req extends Omit<Entity, 'id'> {}",
      "",
      "       export interface Res extends Entity {}",
      "   }",
      "",
      "   export namespace GetOne {",
      "       export interface Req {",
      "           id: string;",
      "       }",
      "",
      "       export interface Res extends Entity {}",
      "   }",
      "",
      "   export namespace Patch {",
      "       export interface Req extends Entity {}",
      "",
      "       export interface Res extends Entity {}",
      "   }",
      "",
      "   export namespace Delete {",
      "       export interface Req {",
      "           id: string;",
      "       }",
      "",
      "       export interface Res {}",
      "   }",
      "}"
    ],
    "Angular Exports Entity": [
      "export type { <FTName | pascalcase> } from './<FTName | kebabcase>';",
      "export { <FTName | pascalcase>ApiService } from './<FTName | kebabcase>.api.service';"
    ]
  },
  "folderTemplates.structures": [
    {
      "name": "Angular Component Structure",
      "structure": [
        {
          "fileName": "<FTName | kebabcase>.component.ts",
          "template": "Angular Component"
        },
        {
          "fileName": "<FTName | kebabcase>.template.html",
          "template": "Angular Template"
        },
        {
          "fileName": "<FTName | kebabcase>.style.scss",
          "template": "Angular Style"
        }
      ]
    },
    {
      "name": "Angular Entity Point",
      "structure": [
        {
          "fileName": "<FTName | kebabcase>.api.service.ts",
          "template": "Angular Service"
        },
        {
          "fileName": "<FTName | kebabcase>.d.ts",
          "template": "Angular Interfaces"
        },
        {
          "fileName": "index.ts",
          "template": "Angular Exports Entity"
        }
      ]
    }
  ],
  "editor.stickyScroll.enabled": false,
  "editor.formatOnSave": true,
  "eslint.workingDirectories": [{ "mode": "auto" }],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll": "explicit"
  },
  "eslint.format.enable": true,
  "eslint.run": "onSave",
  "editor.inlayHints.enabled": "off",
  "workbench.colorCustomizations": {
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.lineHighlightBorder": "#9fced11f"
  },
  "diffEditor.wordWrap": "off",
  "editor.guides.indentation": false,
  "editor.guides.bracketPairs": false,

  // Редактор

  // Столбцы, в которых должны отображаться вертикальные линейки
  "editor.rulers": [],

  // Символы, которые будут использоваться как разделители слов при выполнении навигации или других операций, связанных со словами.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Определяет, будут ли выделения иметь скругленные углы.
  "editor.roundedSelection": true,

  // Определяет число символов, после которых текст будет перенесен на следующую строку. Если этот параметр имеет значение 0, используется перенос по ширине окна просмотра (перенос по словам). Если задать значение –1, то в редакторе не будет выполняться перенос по словам.
  "editor.wrappingColumn": 0,

  // Множитель, используемый для параметров deltaX и deltaY событий прокрутки колесика мыши.
  "editor.mouseWheelScrollSensitivity": 1,

  // Определяет, должны ли при вводе текста отображаться краткие предложения.
  "editor.quickSuggestions": {
    "comments": "on",
    "strings": "on",
    "other": "on"
  },

  // Включение подсказок для параметров
  "editor.parameterHints": true,

  // Определяет, должен ли редактор автоматически закрывать скобки после открытия.
  "editor.autoClosingBrackets": true,

  // Управляет параметром, определяющим, должен ли редактор автоматически форматировать строку после ввода.
  "editor.formatOnType": false,

  // Определяет, должны ли при вводе триггерных символов автоматически отображаться предложения.
  "editor.suggestOnTriggerCharacters": true,

  // Определяет, можно ли принимать предложения клавишей ВВОД в дополнение к клавише TAB. Это помогает избежать неоднозначности между вставкой новых строк или принятием предложений.
  "editor.acceptSuggestionOnEnter": "on",

  // Управляет отображением фрагментов вместе с другими предложениями и их сортировкой.
  "editor.snippetSuggestions": "bottom",

  // Включите предложения на основе слов.
  "editor.wordBasedSuggestions": "matchingDocuments",

  // Вставка фрагментов при совпадении их префиксов. Функция работает оптимально, если параметр "quickSuggestions" отключен.
  "editor.tabCompletion": "off",

  // Определяет, будет ли редактор выделять фрагменты, совпадающие с выделенным текстом.
  "editor.selectionHighlight": true,

  // Определяет, сколько украшений могут отображаться на одном месте в обзорной линейке.
  "editor.overviewRulerLanes": 3,

  // Изменение размера шрифта в редакторе при нажатой клавише CTRL и движении колесика мыши
  "editor.mouseWheelZoom": false,

  // Определяет, должен ли редактор обрабатывать символы пробела; возможные значения: "none", "boundary" и "all". Параметр "boundary" не обрабатывает единичные пробелы между словами.
  "editor.renderWhitespace": "none",

  // Определяет, должен ли редактор отображать текущее выделение строки
  "editor.renderLineHighlight": "line",

  // Управляет показом групп связанных элементов кода в редакторе
  "editor.codeLens": true,

  // Вставка и удаление пробелов после позиции табуляции
  "editor.useTabStops": true,

  // Удалить автоматически вставляемый конечный пробел
  "editor.trimAutoWhitespace": true,

  // Оставлять просматривающие редакторы открытыми, даже если дважды щелкнуто их содержимое или нажата клавиша ESC.
  "editor.stablePeek": false,

  // Определяет, как редактор несовпадений отображает отличия: рядом или в тексте.
  "diffEditor.renderSideBySide": true,

  // Определяет, должен ли редактор несовпадений трактовать несовпадения символов-разделителей как различия.
  "diffEditor.ignoreTrimWhitespace": true,

  // Настройки, которые используются для изменения поведения некоторых действий и сопоставителей Emmet.
  "emmet.preferences": {},

  // Задайте профиль для указанного синтаксиса или используйте свой собственный профиль с определенными правилами.
  "emmet.syntaxProfiles": {},

  // Массив языков, в которых не должны развертываться сокращения Emmet.
  "emmet.excludeLanguages": [],

  // Workbench

  // Определяет, должны ли открытые редакторы отображаться на вкладках или нет.
  "workbench.editor.showTabs": "multiple",

  // Определяет, должны ли открытые редакторы отображаться со значком. Требует включить тему значков.
  "workbench.editor.showIcons": true,

  // Определяет, отображаются ли открытые редакторы в режиме предварительного просмотра. Редакторы с предварительным просмотром повторно используются до сохранения (например, с помощью двойного щелчка или изменения).
  "workbench.editor.enablePreview": true,

  // Определяет, отображаются ли редакторы из Quick Open в режиме предварительного просмотра. Редакторы в режиме предварительного просмотра повторно используются до сохранения (например, с помощью двойного щелчка или изменения).
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // Определяет место открытия редакторов. Выберите "Слева" или "Справа", чтобы открывать редакторы слева или справа от активного сейчас редактора. Выберите "Первый" или "Последний", чтобы открывать редакторы независимо от активного сейчас редактора.
  "workbench.editor.openPositioning": "first",

  // Управляет автоматическим закрытием Quick Open при потере фокуса.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Управляет открытием редактора с отображением всех настроек по умолчанию при открытии настроек.
  "workbench.settings.openDefaultSettings": true,

  // Окно

  // Управляет повторным открытием папок после перезапуска. Выберите значение "none", чтобы не открывать папку повторно, "one", чтобы открывалась последняя папка, с которой вы работали, или "all", чтобы открывались все папки последнего сеанса.
  "window.reopenFolders": "one",

  // Файлы

  // Настройте сопоставления файлов с языками (например, "*.extension": "html"). У них будет приоритет перед заданными по умолчанию сопоставлениями установленных языков.
  "files.associations": {},

  // Кодировка набора символов по умолчанию, используемая при чтении и записи файлов
  "files.encoding": "utf8",

  // Символ конца строки по умолчанию.
  "files.eol": "\r\n",

  // Если этот параметр включен, при сохранении файла будут удалены завершающие символы-разделители.
  "files.trimTrailingWhitespace": false,

  // Управляет автоматическим сохранением измененных файлов. Допустимые значения: "off", "afterDelay", "onFocusChange" (редактор теряет фокус) и "onWindowChange" (окно теряет фокус). Если задано значение "afterDelay", можно настроить задержку в "files.autoSaveDelay".
  "files.autoSave": "off",

  // Определяет задержку в мс, после которой измененный файл сохраняется автоматически. Действует, только если параметр files.autoSave имеет значение "afterDelay".
  "files.autoSaveDelay": 1000,

  // Проводник

  // Число редакторов, отображаемых на панели открытых редакторов. Задайте значение 0, чтобы скрыть панель.
  "explorer.openEditors.visible": 9,

  // Определяет, будет ли высота раздела открытых редакторов динамически адаптироваться к количеству элементов.
  "explorer.openEditors.dynamicHeight": false,

  // Определяет, следует ли обозревателю автоматически отображать файлы при их открытии.
  "explorer.autoReveal": true,

  // Определяет, разрешено ли перемещение файлов и папок перетаскиванием в проводнике.
  "explorer.enableDragAndDrop": true,

  // Поиск

  // Настройте стандартные маски для исключения файлов и папок при поиске. Все стандартные маски наследуются от параметра file.exclude.
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // Настройте для включения результатов поиска глобальных символов в файлы по запросу для Quick Open.
  "search.quickOpen.includeSymbols": false
}
